// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: pvz.proto

package pvz_v1

import (
	context "context"
	abstract "Homework-1/pkg/api/abstract"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PVZService_CreatePVZ_FullMethodName  = "/PVZService/CreatePVZ"
	PVZService_GetPVZByID_FullMethodName = "/PVZService/GetPVZByID"
	PVZService_ListPVZ_FullMethodName    = "/PVZService/ListPVZ"
	PVZService_UpdatePVZ_FullMethodName  = "/PVZService/UpdatePVZ"
	PVZService_DeletePVZ_FullMethodName  = "/PVZService/DeletePVZ"
)

// PVZServiceClient is the client API for PVZService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PVZServiceClient interface {
	CreatePVZ(ctx context.Context, in *PVZCreateRequest, opts ...grpc.CallOption) (*abstract.MessageResponse, error)
	GetPVZByID(ctx context.Context, in *PVZIDRequest, opts ...grpc.CallOption) (*PVZAllInfo, error)
	ListPVZ(ctx context.Context, in *abstract.Page, opts ...grpc.CallOption) (*ListResponse, error)
	UpdatePVZ(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*abstract.MessageResponse, error)
	DeletePVZ(ctx context.Context, in *PVZIDRequest, opts ...grpc.CallOption) (*abstract.MessageResponse, error)
}

type pVZServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPVZServiceClient(cc grpc.ClientConnInterface) PVZServiceClient {
	return &pVZServiceClient{cc}
}

func (c *pVZServiceClient) CreatePVZ(ctx context.Context, in *PVZCreateRequest, opts ...grpc.CallOption) (*abstract.MessageResponse, error) {
	out := new(abstract.MessageResponse)
	err := c.cc.Invoke(ctx, PVZService_CreatePVZ_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pVZServiceClient) GetPVZByID(ctx context.Context, in *PVZIDRequest, opts ...grpc.CallOption) (*PVZAllInfo, error) {
	out := new(PVZAllInfo)
	err := c.cc.Invoke(ctx, PVZService_GetPVZByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pVZServiceClient) ListPVZ(ctx context.Context, in *abstract.Page, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, PVZService_ListPVZ_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pVZServiceClient) UpdatePVZ(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*abstract.MessageResponse, error) {
	out := new(abstract.MessageResponse)
	err := c.cc.Invoke(ctx, PVZService_UpdatePVZ_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pVZServiceClient) DeletePVZ(ctx context.Context, in *PVZIDRequest, opts ...grpc.CallOption) (*abstract.MessageResponse, error) {
	out := new(abstract.MessageResponse)
	err := c.cc.Invoke(ctx, PVZService_DeletePVZ_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PVZServiceServer is the server API for PVZService service.
// All implementations must embed UnimplementedPVZServiceServer
// for forward compatibility
type PVZServiceServer interface {
	CreatePVZ(context.Context, *PVZCreateRequest) (*abstract.MessageResponse, error)
	GetPVZByID(context.Context, *PVZIDRequest) (*PVZAllInfo, error)
	ListPVZ(context.Context, *abstract.Page) (*ListResponse, error)
	UpdatePVZ(context.Context, *UpdateRequest) (*abstract.MessageResponse, error)
	DeletePVZ(context.Context, *PVZIDRequest) (*abstract.MessageResponse, error)
	mustEmbedUnimplementedPVZServiceServer()
}

// UnimplementedPVZServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPVZServiceServer struct {
}

func (UnimplementedPVZServiceServer) CreatePVZ(context.Context, *PVZCreateRequest) (*abstract.MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePVZ not implemented")
}
func (UnimplementedPVZServiceServer) GetPVZByID(context.Context, *PVZIDRequest) (*PVZAllInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPVZByID not implemented")
}
func (UnimplementedPVZServiceServer) ListPVZ(context.Context, *abstract.Page) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPVZ not implemented")
}
func (UnimplementedPVZServiceServer) UpdatePVZ(context.Context, *UpdateRequest) (*abstract.MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePVZ not implemented")
}
func (UnimplementedPVZServiceServer) DeletePVZ(context.Context, *PVZIDRequest) (*abstract.MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePVZ not implemented")
}
func (UnimplementedPVZServiceServer) mustEmbedUnimplementedPVZServiceServer() {}

// UnsafePVZServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PVZServiceServer will
// result in compilation errors.
type UnsafePVZServiceServer interface {
	mustEmbedUnimplementedPVZServiceServer()
}

func RegisterPVZServiceServer(s grpc.ServiceRegistrar, srv PVZServiceServer) {
	s.RegisterService(&PVZService_ServiceDesc, srv)
}

func _PVZService_CreatePVZ_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PVZCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PVZServiceServer).CreatePVZ(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PVZService_CreatePVZ_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PVZServiceServer).CreatePVZ(ctx, req.(*PVZCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PVZService_GetPVZByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PVZIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PVZServiceServer).GetPVZByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PVZService_GetPVZByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PVZServiceServer).GetPVZByID(ctx, req.(*PVZIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PVZService_ListPVZ_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(abstract.Page)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PVZServiceServer).ListPVZ(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PVZService_ListPVZ_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PVZServiceServer).ListPVZ(ctx, req.(*abstract.Page))
	}
	return interceptor(ctx, in, info, handler)
}

func _PVZService_UpdatePVZ_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PVZServiceServer).UpdatePVZ(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PVZService_UpdatePVZ_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PVZServiceServer).UpdatePVZ(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PVZService_DeletePVZ_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PVZIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PVZServiceServer).DeletePVZ(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PVZService_DeletePVZ_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PVZServiceServer).DeletePVZ(ctx, req.(*PVZIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PVZService_ServiceDesc is the grpc.ServiceDesc for PVZService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PVZService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PVZService",
	HandlerType: (*PVZServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePVZ",
			Handler:    _PVZService_CreatePVZ_Handler,
		},
		{
			MethodName: "GetPVZByID",
			Handler:    _PVZService_GetPVZByID_Handler,
		},
		{
			MethodName: "ListPVZ",
			Handler:    _PVZService_ListPVZ_Handler,
		},
		{
			MethodName: "UpdatePVZ",
			Handler:    _PVZService_UpdatePVZ_Handler,
		},
		{
			MethodName: "DeletePVZ",
			Handler:    _PVZService_DeletePVZ_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pvz.proto",
}
