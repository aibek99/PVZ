// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: box.proto

package box_v1

import (
	context "context"
	abstract "Homework-1/pkg/api/abstract"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BoxService_CreateBox_FullMethodName  = "/BoxService/CreateBox"
	BoxService_DeleteBox_FullMethodName  = "/BoxService/DeleteBox"
	BoxService_ListBoxes_FullMethodName  = "/BoxService/ListBoxes"
	BoxService_GetBoxByID_FullMethodName = "/BoxService/GetBoxByID"
)

// BoxServiceClient is the client API for BoxService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BoxServiceClient interface {
	CreateBox(ctx context.Context, in *BoxCreateRequest, opts ...grpc.CallOption) (*abstract.MessageResponse, error)
	DeleteBox(ctx context.Context, in *BoxIDRequest, opts ...grpc.CallOption) (*abstract.MessageResponse, error)
	ListBoxes(ctx context.Context, in *abstract.Page, opts ...grpc.CallOption) (*BoxListResponse, error)
	GetBoxByID(ctx context.Context, in *BoxIDRequest, opts ...grpc.CallOption) (*BoxAllInfo, error)
}

type boxServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBoxServiceClient(cc grpc.ClientConnInterface) BoxServiceClient {
	return &boxServiceClient{cc}
}

func (c *boxServiceClient) CreateBox(ctx context.Context, in *BoxCreateRequest, opts ...grpc.CallOption) (*abstract.MessageResponse, error) {
	out := new(abstract.MessageResponse)
	err := c.cc.Invoke(ctx, BoxService_CreateBox_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boxServiceClient) DeleteBox(ctx context.Context, in *BoxIDRequest, opts ...grpc.CallOption) (*abstract.MessageResponse, error) {
	out := new(abstract.MessageResponse)
	err := c.cc.Invoke(ctx, BoxService_DeleteBox_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boxServiceClient) ListBoxes(ctx context.Context, in *abstract.Page, opts ...grpc.CallOption) (*BoxListResponse, error) {
	out := new(BoxListResponse)
	err := c.cc.Invoke(ctx, BoxService_ListBoxes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boxServiceClient) GetBoxByID(ctx context.Context, in *BoxIDRequest, opts ...grpc.CallOption) (*BoxAllInfo, error) {
	out := new(BoxAllInfo)
	err := c.cc.Invoke(ctx, BoxService_GetBoxByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BoxServiceServer is the server API for BoxService service.
// All implementations must embed UnimplementedBoxServiceServer
// for forward compatibility
type BoxServiceServer interface {
	CreateBox(context.Context, *BoxCreateRequest) (*abstract.MessageResponse, error)
	DeleteBox(context.Context, *BoxIDRequest) (*abstract.MessageResponse, error)
	ListBoxes(context.Context, *abstract.Page) (*BoxListResponse, error)
	GetBoxByID(context.Context, *BoxIDRequest) (*BoxAllInfo, error)
	mustEmbedUnimplementedBoxServiceServer()
}

// UnimplementedBoxServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBoxServiceServer struct {
}

func (UnimplementedBoxServiceServer) CreateBox(context.Context, *BoxCreateRequest) (*abstract.MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBox not implemented")
}
func (UnimplementedBoxServiceServer) DeleteBox(context.Context, *BoxIDRequest) (*abstract.MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBox not implemented")
}
func (UnimplementedBoxServiceServer) ListBoxes(context.Context, *abstract.Page) (*BoxListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBoxes not implemented")
}
func (UnimplementedBoxServiceServer) GetBoxByID(context.Context, *BoxIDRequest) (*BoxAllInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBoxByID not implemented")
}
func (UnimplementedBoxServiceServer) mustEmbedUnimplementedBoxServiceServer() {}

// UnsafeBoxServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BoxServiceServer will
// result in compilation errors.
type UnsafeBoxServiceServer interface {
	mustEmbedUnimplementedBoxServiceServer()
}

func RegisterBoxServiceServer(s grpc.ServiceRegistrar, srv BoxServiceServer) {
	s.RegisterService(&BoxService_ServiceDesc, srv)
}

func _BoxService_CreateBox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoxCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoxServiceServer).CreateBox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoxService_CreateBox_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoxServiceServer).CreateBox(ctx, req.(*BoxCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoxService_DeleteBox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoxIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoxServiceServer).DeleteBox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoxService_DeleteBox_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoxServiceServer).DeleteBox(ctx, req.(*BoxIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoxService_ListBoxes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(abstract.Page)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoxServiceServer).ListBoxes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoxService_ListBoxes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoxServiceServer).ListBoxes(ctx, req.(*abstract.Page))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoxService_GetBoxByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoxIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoxServiceServer).GetBoxByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoxService_GetBoxByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoxServiceServer).GetBoxByID(ctx, req.(*BoxIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BoxService_ServiceDesc is the grpc.ServiceDesc for BoxService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BoxService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BoxService",
	HandlerType: (*BoxServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBox",
			Handler:    _BoxService_CreateBox_Handler,
		},
		{
			MethodName: "DeleteBox",
			Handler:    _BoxService_DeleteBox_Handler,
		},
		{
			MethodName: "ListBoxes",
			Handler:    _BoxService_ListBoxes_Handler,
		},
		{
			MethodName: "GetBoxByID",
			Handler:    _BoxService_GetBoxByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "box.proto",
}
