// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: order.proto

package order_v1

import (
	context "context"
	abstract "Homework-1/pkg/api/abstract"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OrderService_ReceiveOrder_FullMethodName     = "/OrderService/ReceiveOrder"
	OrderService_IssueOrder_FullMethodName       = "/OrderService/IssueOrder"
	OrderService_ReturnedOrders_FullMethodName   = "/OrderService/ReturnedOrders"
	OrderService_AcceptOrder_FullMethodName      = "/OrderService/AcceptOrder"
	OrderService_TurnInOrder_FullMethodName      = "/OrderService/TurnInOrder"
	OrderService_OrderList_FullMethodName        = "/OrderService/OrderList"
	OrderService_UniqueClientList_FullMethodName = "/OrderService/UniqueClientList"
)

// OrderServiceClient is the client API for OrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderServiceClient interface {
	ReceiveOrder(ctx context.Context, in *OrderCreateRequest, opts ...grpc.CallOption) (*abstract.MessageResponse, error)
	IssueOrder(ctx context.Context, in *IssueOrderRequest, opts ...grpc.CallOption) (*abstract.MessageResponse, error)
	ReturnedOrders(ctx context.Context, in *abstract.Page, opts ...grpc.CallOption) (*ReturnedListResponse, error)
	AcceptOrder(ctx context.Context, in *RequestWithClientID, opts ...grpc.CallOption) (*abstract.MessageResponse, error)
	TurnInOrder(ctx context.Context, in *OrderIDRequest, opts ...grpc.CallOption) (*abstract.MessageResponse, error)
	OrderList(ctx context.Context, in *abstract.Page, opts ...grpc.CallOption) (*OrderListResponse, error)
	UniqueClientList(ctx context.Context, in *abstract.Page, opts ...grpc.CallOption) (*UniqueClientListResponse, error)
}

type orderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderServiceClient(cc grpc.ClientConnInterface) OrderServiceClient {
	return &orderServiceClient{cc}
}

func (c *orderServiceClient) ReceiveOrder(ctx context.Context, in *OrderCreateRequest, opts ...grpc.CallOption) (*abstract.MessageResponse, error) {
	out := new(abstract.MessageResponse)
	err := c.cc.Invoke(ctx, OrderService_ReceiveOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) IssueOrder(ctx context.Context, in *IssueOrderRequest, opts ...grpc.CallOption) (*abstract.MessageResponse, error) {
	out := new(abstract.MessageResponse)
	err := c.cc.Invoke(ctx, OrderService_IssueOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) ReturnedOrders(ctx context.Context, in *abstract.Page, opts ...grpc.CallOption) (*ReturnedListResponse, error) {
	out := new(ReturnedListResponse)
	err := c.cc.Invoke(ctx, OrderService_ReturnedOrders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) AcceptOrder(ctx context.Context, in *RequestWithClientID, opts ...grpc.CallOption) (*abstract.MessageResponse, error) {
	out := new(abstract.MessageResponse)
	err := c.cc.Invoke(ctx, OrderService_AcceptOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) TurnInOrder(ctx context.Context, in *OrderIDRequest, opts ...grpc.CallOption) (*abstract.MessageResponse, error) {
	out := new(abstract.MessageResponse)
	err := c.cc.Invoke(ctx, OrderService_TurnInOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) OrderList(ctx context.Context, in *abstract.Page, opts ...grpc.CallOption) (*OrderListResponse, error) {
	out := new(OrderListResponse)
	err := c.cc.Invoke(ctx, OrderService_OrderList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) UniqueClientList(ctx context.Context, in *abstract.Page, opts ...grpc.CallOption) (*UniqueClientListResponse, error) {
	out := new(UniqueClientListResponse)
	err := c.cc.Invoke(ctx, OrderService_UniqueClientList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderServiceServer is the server API for OrderService service.
// All implementations must embed UnimplementedOrderServiceServer
// for forward compatibility
type OrderServiceServer interface {
	ReceiveOrder(context.Context, *OrderCreateRequest) (*abstract.MessageResponse, error)
	IssueOrder(context.Context, *IssueOrderRequest) (*abstract.MessageResponse, error)
	ReturnedOrders(context.Context, *abstract.Page) (*ReturnedListResponse, error)
	AcceptOrder(context.Context, *RequestWithClientID) (*abstract.MessageResponse, error)
	TurnInOrder(context.Context, *OrderIDRequest) (*abstract.MessageResponse, error)
	OrderList(context.Context, *abstract.Page) (*OrderListResponse, error)
	UniqueClientList(context.Context, *abstract.Page) (*UniqueClientListResponse, error)
	mustEmbedUnimplementedOrderServiceServer()
}

// UnimplementedOrderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrderServiceServer struct {
}

func (UnimplementedOrderServiceServer) ReceiveOrder(context.Context, *OrderCreateRequest) (*abstract.MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveOrder not implemented")
}
func (UnimplementedOrderServiceServer) IssueOrder(context.Context, *IssueOrderRequest) (*abstract.MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssueOrder not implemented")
}
func (UnimplementedOrderServiceServer) ReturnedOrders(context.Context, *abstract.Page) (*ReturnedListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnedOrders not implemented")
}
func (UnimplementedOrderServiceServer) AcceptOrder(context.Context, *RequestWithClientID) (*abstract.MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptOrder not implemented")
}
func (UnimplementedOrderServiceServer) TurnInOrder(context.Context, *OrderIDRequest) (*abstract.MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TurnInOrder not implemented")
}
func (UnimplementedOrderServiceServer) OrderList(context.Context, *abstract.Page) (*OrderListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderList not implemented")
}
func (UnimplementedOrderServiceServer) UniqueClientList(context.Context, *abstract.Page) (*UniqueClientListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UniqueClientList not implemented")
}
func (UnimplementedOrderServiceServer) mustEmbedUnimplementedOrderServiceServer() {}

// UnsafeOrderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderServiceServer will
// result in compilation errors.
type UnsafeOrderServiceServer interface {
	mustEmbedUnimplementedOrderServiceServer()
}

func RegisterOrderServiceServer(s grpc.ServiceRegistrar, srv OrderServiceServer) {
	s.RegisterService(&OrderService_ServiceDesc, srv)
}

func _OrderService_ReceiveOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).ReceiveOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_ReceiveOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).ReceiveOrder(ctx, req.(*OrderCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_IssueOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).IssueOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_IssueOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).IssueOrder(ctx, req.(*IssueOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_ReturnedOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(abstract.Page)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).ReturnedOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_ReturnedOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).ReturnedOrders(ctx, req.(*abstract.Page))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_AcceptOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestWithClientID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).AcceptOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_AcceptOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).AcceptOrder(ctx, req.(*RequestWithClientID))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_TurnInOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).TurnInOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_TurnInOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).TurnInOrder(ctx, req.(*OrderIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_OrderList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(abstract.Page)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).OrderList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_OrderList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).OrderList(ctx, req.(*abstract.Page))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_UniqueClientList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(abstract.Page)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).UniqueClientList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_UniqueClientList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).UniqueClientList(ctx, req.(*abstract.Page))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderService_ServiceDesc is the grpc.ServiceDesc for OrderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "OrderService",
	HandlerType: (*OrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReceiveOrder",
			Handler:    _OrderService_ReceiveOrder_Handler,
		},
		{
			MethodName: "IssueOrder",
			Handler:    _OrderService_IssueOrder_Handler,
		},
		{
			MethodName: "ReturnedOrders",
			Handler:    _OrderService_ReturnedOrders_Handler,
		},
		{
			MethodName: "AcceptOrder",
			Handler:    _OrderService_AcceptOrder_Handler,
		},
		{
			MethodName: "TurnInOrder",
			Handler:    _OrderService_TurnInOrder_Handler,
		},
		{
			MethodName: "OrderList",
			Handler:    _OrderService_OrderList_Handler,
		},
		{
			MethodName: "UniqueClientList",
			Handler:    _OrderService_UniqueClientList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order.proto",
}
